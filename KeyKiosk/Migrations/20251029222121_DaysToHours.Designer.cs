// <auto-generated />
using System;
using KeyKiosk.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KeyKiosk.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251029222121_DaysToHours")]
    partial class DaysToHours
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KeyKiosk.Data.Drawer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CurrentRONumber")
                        .HasColumnType("text");

                    b.Property<bool>("Occupied")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Drawers");
                });

            modelBuilder.Entity("KeyKiosk.Data.DrawerLogEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DrawerId")
                        .HasColumnType("integer");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RONumber")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("DrawerLog");
                });

            modelBuilder.Entity("KeyKiosk.Data.PartTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CostCents")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PartTemplates");
                });

            modelBuilder.Entity("KeyKiosk.Data.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Pin")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Pin")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KeyKiosk.Data.UserLogEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("ActingUserId")
                        .HasColumnType("integer");

                    b.Property<string>("ActingUserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SecondaryUserId")
                        .HasColumnType("integer");

                    b.Property<string>("SecondaryUserName")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("UserLog");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehiclePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkOrders");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTimeOffset>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("workOrderId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("UserId");

                    b.HasIndex("workOrderId");

                    b.ToTable("WorkOrderLog", (string)null);

                    b.HasDiscriminator<string>("EventType");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderPart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CostCents")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderParts");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CostCents")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HoursForCompletion")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WorkOrderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("WorkOrderId");

                    b.ToTable("WorkOrderTasks");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderTaskTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpectedHoursForCompletion")
                        .HasColumnType("integer");

                    b.Property<int>("TaskCostCents")
                        .HasColumnType("integer");

                    b.Property<string>("TaskDetails")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaskTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WorkOrderTaskTemplates");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+CreateEvent", b =>
                {
                    b.HasBaseType("KeyKiosk.Data.WorkOrderLogEvent");

                    b.HasDiscriminator().HasValue("Created");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+DetailsChangedEvent", b =>
                {
                    b.HasBaseType("KeyKiosk.Data.WorkOrderLogEvent");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehiclePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("DetailsChanged");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+StatusChangedEvent", b =>
                {
                    b.HasBaseType("KeyKiosk.Data.WorkOrderLogEvent");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("StatusChanged");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+TaskAddedEvent", b =>
                {
                    b.HasBaseType("KeyKiosk.Data.WorkOrderLogEvent");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasIndex("TaskId");

                    b.HasDiscriminator().HasValue("TaskAdded");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+TaskDetailsChangedEvent", b =>
                {
                    b.HasBaseType("KeyKiosk.Data.WorkOrderLogEvent");

                    b.Property<int>("CostCents")
                        .HasColumnType("integer");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasIndex("TaskId");

                    b.ToTable("WorkOrderLog", t =>
                        {
                            t.Property("Details")
                                .HasColumnName("TaskDetailsChangedEvent_Details");

                            t.Property("TaskId")
                                .HasColumnName("TaskDetailsChangedEvent_TaskId");
                        });

                    b.HasDiscriminator().HasValue("TaskDetailsChanged");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+TaskRemovedEvent", b =>
                {
                    b.HasBaseType("KeyKiosk.Data.WorkOrderLogEvent");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasIndex("TaskId");

                    b.ToTable("WorkOrderLog", t =>
                        {
                            t.Property("TaskId")
                                .HasColumnName("TaskRemovedEvent_TaskId");
                        });

                    b.HasDiscriminator().HasValue("TaskRemoved");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+TaskStatusChangedEvent", b =>
                {
                    b.HasBaseType("KeyKiosk.Data.WorkOrderLogEvent");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasIndex("TaskId");

                    b.ToTable("WorkOrderLog", t =>
                        {
                            t.Property("Status")
                                .HasColumnName("TaskStatusChangedEvent_Status");

                            t.Property("TaskId")
                                .HasColumnName("TaskStatusChangedEvent_TaskId");
                        });

                    b.HasDiscriminator().HasValue("TaskStatusChanged");
                });

            modelBuilder.Entity("KeyKiosk.Data.User", b =>
                {
                    b.OwnsOne("KeyKiosk.Data.UserDesktopLogin", "DesktopLogin", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("integer");

                            b1.Property<string>("HashedPassword")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("UserId");

                            b1.HasIndex("Username")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("DesktopLogin");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent", b =>
                {
                    b.HasOne("KeyKiosk.Data.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KeyKiosk.Data.WorkOrder", "workOrder")
                        .WithMany()
                        .HasForeignKey("workOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("workOrder");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderPart", b =>
                {
                    b.HasOne("KeyKiosk.Data.WorkOrder", "WorkOrder")
                        .WithMany("Parts")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderTask", b =>
                {
                    b.HasOne("KeyKiosk.Data.WorkOrder", "WorkOrder")
                        .WithMany("Tasks")
                        .HasForeignKey("WorkOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+TaskAddedEvent", b =>
                {
                    b.HasOne("KeyKiosk.Data.WorkOrderTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+TaskDetailsChangedEvent", b =>
                {
                    b.HasOne("KeyKiosk.Data.WorkOrderTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+TaskRemovedEvent", b =>
                {
                    b.HasOne("KeyKiosk.Data.WorkOrderTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrderLogEvent+TaskStatusChangedEvent", b =>
                {
                    b.HasOne("KeyKiosk.Data.WorkOrderTask", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("KeyKiosk.Data.WorkOrder", b =>
                {
                    b.Navigation("Parts");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
