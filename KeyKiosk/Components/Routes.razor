@rendermode InteractiveServer
@inject UserSessionService session
@inject NavigationManager navManager
@inject NavAuthService navAuth

<Router AppAssembly="typeof(Program).Assembly" OnNavigateAsync="authHandler">
    <Found Context="routeData">
        <RouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
        <FocusOnNavigate RouteData="routeData" Selector="h1" />
    </Found>
</Router>

@code {
    void authHandler(NavigationContext ctx)
    {
        // var newpath = navAuth.UserCanAccessPath(ctx.Path);
        // if (!(newpath is null))
        // {
        //     navManager.NavigateTo(newpath);
        // }
    }

    // protected override void OnInitialized()
    // {
    //     navManager.RegisterLocationChangingHandler(OnLocationChangingHandler);
    // }

    // ValueTask OnLocationChangingHandler(LocationChangingContext ctx)
    // {
    //     var targetPath = navManager.ToBaseRelativePath(ctx.TargetLocation);
    //     var currentPath = navManager.ToBaseRelativePath(navManager.Uri);
    //     var unauthPath = navAuth.UserCanAccessPath(targetPath);
    //     Console.WriteLine($"OnLocChanging old: '{currentPath}', new: '{targetPath}'");
    //     if (!(unauthPath is null))
    //     {
    //         if (navAuth.UserCanAccessPath(currentPath) is null)
    //         {
    //             ctx.PreventNavigation();
    //         } else
    //         {
    //             ctx.PreventNavigation();
    //             navManager.NavigateTo(unauthPath);
    //         }
    //     }
    //     return ValueTask.CompletedTask;
    // }
}