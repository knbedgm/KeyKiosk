@page "/home"
@using KeyKiosk.Data

<PageTitle>Home</PageTitle>

<h3>Home</h3>

<label>Start Date: </label>
<input type="date" @bind="StartDate" />

<label>End Date: </label>
<input type="date" @bind="EndDate"/>

<label>Customer Name: </label>
<input type="text" @bind="CustomerName" />

<label>Vehicle Plate: </label>
<input type="text" @bind="VehicleLicensePlate" />

<label>Employee Name: </label>
<input type="text" @bind="EmployeeName" />

<br />
<button @onclick="() => PreviewEfficiencyReport()">Preview Efficiency Report</button>
<br />
<button @onclick="() => PreviewWorkOrdersReport()">Preview Work Orders Report</button>
<br />
<button @onclick="() => PreviewCustomerHistoryReport()">Preview Customer History Report</button>
<br />
<button @onclick="() => PreviewVehicleHistoryReport()">Preview Vehicle History Report</button>
<br />
<button @onclick="() => PreviewTopTasksReport()">Preview Popular Tasks Report</button>
<br />
<button @onclick="() => PreviewPartsReport()">Preview Parts Usage Expense Report</button>
<br />
<button @onclick="() => PreviewRevenueReport()">Preview Revenue Report</button>
<br />
<button @onclick="() => PreviewMechanicProductivityReport()">Preview Mechanic Productivity Report</button>
<br />
<br />
<br />
<br />
<br />
<br />
<button @onclick="() => DownloadEfficiencyReport()">Download Efficiency Report</button>
<br />
<button @onclick="() => DownloadWorkOrdersReport()">Download Work Orders Report</button>
<br />
<button @onclick="() => DownloadCustomerHistoryReport()">Download Customer History Report</button>
<br />
<button @onclick="() => DownloadVehicleHistoryReport()">Download Vehicle History Report</button>
<br />
<button @onclick="() => DownloadTopTasksReport()">Download Popular Tasks Report</button>
<br />
<button @onclick="() => DownloadPartsReport()">Download Parts Usage Expense Report</button>
<br />
<button @onclick="() => DownloadRevenueReport()">Download Revenue Report</button>


@code {

    public DateTimeOffset StartDate { get; set; } = new DateTimeOffset(DateTime.Now);
    public DateTimeOffset EndDate { get; set; } = new DateTimeOffset(DateTime.Now);
    public string CustomerName { get; set; } = "";
    public string VehicleLicensePlate { get; set; } = "";
    public string EmployeeName { get; set; } = "";
    [Inject] private WorkOrderService WorkOrderService { get; set; }
    [Inject] private WorkOrderTaskService TaskService { get; set; }
    [Inject] private WorkOrderPartService PartService { get; set; }
    [Inject] private WorkOrderTaskTemplateService TemplateService { get; set; }
    [Inject] private WorkOrderLogService WorkOrderLogService { get; set; }
    [Inject] private PreviewDownloadService PreviewDownloadService { get; set; } = default!;

    public async void PreviewEfficiencyReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrderByDatePeriod(StartDate, EndDate);
        List<WorkOrderTaskTemplate> templates = TemplateService.GetAllTaskTemplates();

        await PreviewDownloadService.PreviewEfficiencyReportAsync(workOrders, templates, StartDate, EndDate);
    }

    public async void PreviewWorkOrdersReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrderByDatePeriod(StartDate, EndDate);

        await PreviewDownloadService.PreviewWorkOrdersReportAsync(workOrders, StartDate, EndDate);
    }

    public async void PreviewCustomerHistoryReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrdersByCustomerNameAsync(CustomerName);

        await PreviewDownloadService.PreviewCustomerHistoryReportAsync(workOrders, CustomerName);
    }

    public async void PreviewVehicleHistoryReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrdersByVehiclePlateAsync(VehicleLicensePlate);

        await PreviewDownloadService.PreviewVehicleHistoryReportAsync(workOrders, VehicleLicensePlate);
    }

    public async void PreviewTopTasksReport()
    {
        List<WorkOrderTask> tasks = await TaskService.GetTasksByDatePeriod(StartDate, EndDate);

        await PreviewDownloadService.PreviewTopTasksReportAsync(tasks, StartDate, EndDate);
    }

    public async void PreviewPartsReport()
    {
        List<WorkOrderPart> parts = await PartService.GetPartsByDatePeriod(StartDate, EndDate);

        await PreviewDownloadService.PreviewPartsExpenseReportAsync(parts, StartDate, EndDate);
    }

    public async void PreviewRevenueReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrderByDatePeriod(StartDate, EndDate);

        await PreviewDownloadService.PreviewRevenueReportAsync(workOrders, StartDate, EndDate);
    }

    public async void PreviewMechanicProductivityReport()
    {
        List<WorkOrderLogEvent> workOrderLogs = await WorkOrderLogService.GetWorkOrderLogsByUsernameDatePeriod(EmployeeName, StartDate, EndDate);

        await PreviewDownloadService.PreviewMechanicProductivityReportAsync(workOrderLogs, StartDate, EndDate, EmployeeName);
    }




    public async void DownloadEfficiencyReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrderByDatePeriod(StartDate, EndDate);
        List<WorkOrderTaskTemplate> templates = TemplateService.GetAllTaskTemplates();

        await PreviewDownloadService.DownloadEfficiencyReportAsync(workOrders, templates, StartDate, EndDate);
    }

    public async void DownloadWorkOrdersReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrderByDatePeriod(StartDate, EndDate);

        await PreviewDownloadService.DownloadWorkOrdersReportAsync(workOrders, StartDate, EndDate);
    }

    public async void DownloadCustomerHistoryReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrdersByCustomerNameAsync(CustomerName);

        await PreviewDownloadService.DownloadCustomerHistoryReportAsync(workOrders, CustomerName);
    }

    public async void DownloadVehicleHistoryReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrdersByVehiclePlateAsync(VehicleLicensePlate);

        await PreviewDownloadService.DownloadVehicleHistoryReportAsync(workOrders, VehicleLicensePlate);
    }

    public async void DownloadTopTasksReport()
    {
        List<WorkOrderTask> tasks = await TaskService.GetTasksByDatePeriod(StartDate, EndDate);

        await PreviewDownloadService.DownloadTopTasksReportAsync(tasks, StartDate, EndDate);
    }

    public async void DownloadPartsReport()
    {
        List<WorkOrderPart> parts = await PartService.GetPartsByDatePeriod(StartDate, EndDate);

        await PreviewDownloadService.DownloadPartsExpenseReportAsync(parts, StartDate, EndDate);
    }

    public async void DownloadRevenueReport()
    {
        List<WorkOrder> workOrders = await WorkOrderService.GetWorkOrderByDatePeriod(StartDate, EndDate);

        await PreviewDownloadService.DownloadRevenueReportAsync(workOrders, StartDate, EndDate);
    }
}
