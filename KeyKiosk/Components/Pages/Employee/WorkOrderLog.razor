@page "/employee/workorderlogs"
@using KeyKiosk.Data
@using KeyKiosk.Services
@using System.Text
@using System.Text.Json
@inject WorkOrderLogService LogService
@inject IJSRuntime JS

<h2 class="mb-4">Work Order Logs</h2>

<div class="card mb-4">
    <div class="card-body">
        <div class="row g-2">
            <div class="col-md-2">
                <input class="form-control" placeholder="Username" @bind="username" />
            </div>
            <div class="col-md-2">
                <input class="form-control" placeholder="WorkOrder ID" type="number" @bind="workOrderId" />
            </div>
            <div class="col-md-2">
                <input class="form-control" placeholder="Vehicle Plate" @bind="vehiclePlate" />
            </div>
            <div class="col-md-2">
                <select class="form-select" @bind="eventTypeString">
                    <option value="">-- Event Type --</option>
                    @foreach (var t in Enum.GetValues<WorkOrderLogEvent.WorkOrderLogEventType>())
                    {
                        <option value="@t">@t</option>
                    }
                </select>
            </div>
            <div class="col-md-2 d-flex gap-2">
                <button class="btn btn-primary flex-fill" @onclick="LoadLogs">Search</button>
                <button class="btn btn-outline-secondary flex-fill" @onclick="ExportCsv">Export</button>
            </div>
        </div>
    </div>
</div>

@if (logs == null)
{
    <p><em>Loading...</em></p>
}
else if (!logs.Any())
{
    <div class="alert alert-warning">No log events found.</div>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover align-middle">
            <thead class="table-light">
                <tr>
                    <th>ID</th>
                    <th>Date</th>
                    <th>User</th>
                    <th>WorkOrder</th>
                    <th>Details / Customer</th>
                    <th>Plate</th>
                    <th>Event</th>
                    <th>Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in logs)
                {
                    <tr>
                        <td>@log.ID</td>
                        <td>@log.DateTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@log.UserName</td>
                        <td>@log.WorkOrderId</td>
                        <td>@log.WorkOrderDetails</td>
                        <td>@log.WorkOrderVehiclePlate</td>
                        <td><span class="badge bg-info text-dark">@log.EventType</span></td>
                        <td>
                            @if (log.EventType == WorkOrderLogEvent.WorkOrderLogEventType.TaskAdded.ToString())
                            {
                                <span>Task added: <strong>@log.TaskTitle</strong></span>
                            }
                            else if (log.EventType == WorkOrderLogEvent.WorkOrderLogEventType.TaskRemoved.ToString())
                            {
                                <span>Task removed: <strong>@log.TaskTitle</strong></span>
                            }
                            else if (log.EventType == WorkOrderLogEvent.WorkOrderLogEventType.TaskDetailsChanged.ToString())
                            {
                                <details>
                                    <summary>Task details changed</summary>
                                    <div>Task: @log.TaskTitle (@log.TaskId)</div>
                                    <div>Cost: @(log.CostCents.HasValue ? (log.CostCents.Value / 100.0m).ToString("C") : "-")</div>
                                    @if (log.Payload != null)
                                    {
                                        <pre class="mono">@JsonSerializer.Serialize(log.Payload, new JsonSerializerOptions { WriteIndented = true })</pre>
                                    }
                                </details>
                            }
                            else if (log.EventType == WorkOrderLogEvent.WorkOrderLogEventType.StatusChanged.ToString())
                            {
                                <span>Status changed</span>
                                @if (log.Payload != null)
                                {
                                    <div class="mt-1"><pre class="mono">@JsonSerializer.Serialize(log.Payload, new JsonSerializerOptions { WriteIndented = true })</pre></div>
                                }
                            }
                            else if (log.EventType == WorkOrderLogEvent.WorkOrderLogEventType.DetailsChanged.ToString())
                            {
                                <details>
                                    <summary>Work order details changed</summary>
                                    @if (log.Payload != null)
                                    {
                                        <pre class="mono">@JsonSerializer.Serialize(log.Payload, new JsonSerializerOptions { WriteIndented = true })</pre>
                                    }
                                    else
                                    {
                                        <div>@log.WorkOrderDetails</div>
                                    }
                                </details>
                            }
                            else if (log.EventType == WorkOrderLogEvent.WorkOrderLogEventType.Created.ToString())
                            {
                                <span class="text-success">Work order created</span>
                            }
                            else
                            {
                                @if (log.Payload != null)
                                {
                                    <pre class="mono">@JsonSerializer.Serialize(log.Payload, new JsonSerializerOptions { WriteIndented = true })</pre>
                                }
                                else
                                {
                                    <span>-</span>
                                }
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <div class="d-flex justify-content-between align-items-center mt-2">
    </div>
}

@code {
    private List<WorkOrderEventDto>? logs;

    private string? username;
    private int? workOrderId;
    private string? vehiclePlate;
    private string? search;
    private string? eventTypeString;

    int page = 1;
    int pageSize = 25;

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    WorkOrderLogEvent.WorkOrderLogEventType? ParseEventType(string? s)
    {
        if (string.IsNullOrEmpty(s)) return null;
        if (Enum.TryParse<WorkOrderLogEvent.WorkOrderLogEventType>(s, ignoreCase: true, out var t)) return t;
        return null;
    }

    async Task LoadLogs()
    {
        var parsedType = ParseEventType(eventTypeString);
        logs = await LogService.GetFilteredLogDtosAsync(username, workOrderId, status: null, vehiclePlate, search, parsedType, page, pageSize);
        StateHasChanged();
    }

    async Task ExportCsv()
    {
        var parsedType = ParseEventType(eventTypeString);
        var csv = await LogService.ExportLogsToCsvAsync(username, workOrderId, status: null, vehiclePlate, search, parsedType);
        var bytes = Encoding.UTF8.GetBytes(csv);
        var fileName = $"WorkOrderLogs_{DateTime.Now:yyyyMMddHHmmss}.csv";

        using var stream = new MemoryStream(bytes);
        using var streamRef = new DotNetStreamReference(stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    async Task NextPage()
    {
        page++;
        await LoadLogs();
    }

    async Task PrevPage()
    {
        if (page > 1) page--;
        await LoadLogs();
    }
}
