@page "/employee/admin/workorderlogs"
@using KeyKiosk.Data
@using KeyKiosk.Services
@using System.Text
@layout Layout.MainLayout
@inject WorkOrderLogService LogService
@inject WorkOrderAuditService AuditService
@inject IJSRuntime JS

<link href="DesktopShared.css" rel="stylesheet" />
<link href="WorkOrderLogs.css" rel="stylesheet" />

<PageTitle>Work Order Logs</PageTitle>
<h1 style="text-align:center">Work Order Logs</h1>

<!-- Filters -->
<div class="logs-toolbar card-like">
    <div class="filters">
        <input class="table-input" placeholder="Username" @bind="username" />
        <input class="table-input" placeholder="WorkOrder ID" type="number" @bind="workOrderId" />
        <input class="table-input" placeholder="Vehicle Plate" @bind="vehiclePlate" />
        <select class="table-select" @bind="eventType">
            <option value="">Event Type</option>
            @foreach (var type in Enum.GetValues<WorkOrderLogEvent.WorkOrderLogEventType>())
            {
                <option value="@type">@type</option>
            }
        </select>
    </div>
    <div class="actions">
        <button class="btn-primary" @onclick="LoadLogs">Search</button>
        <button class="btn-outline" @onclick="ClearFilters">Clear</button>
        <button class="btn-outline" @onclick="ExportCsv">Export</button>
    </div>
</div>

@if (logs is null)
{
    <p class="text-center">Loading…</p>
}
else if (!logs.Any())
{
    <div class="empty card-like">
        <div>No log events found.</div>
        <small class="muted">Try adjusting the filters above.</small>
    </div>
}
else
{
    <!-- Pager (top) -->
    <div class="pager-bar">
        <div class="pager-left">
            <button class="pager-btn" disabled="@(Page == 1)" @onclick="FirstPage">« First</button>
            <button class="pager-btn" disabled="@(Page == 1)" @onclick="PrevPage">‹ Prev</button>
        </div>
        <div class="pager-middle">
            Page @Page of @TotalPages
            <span class="pager-sep">|</span>
            <label>Per page</label>
            <select class="pager-select" @bind="PageSize">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
            <span class="pager-sep">|</span>
            <span>@TotalCount item(s)</span>
        </div>
        <div class="pager-right">
            <button class="pager-btn" disabled="@(Page == TotalPages)" @onclick="NextPage">Next ›</button>
            <button class="pager-btn" disabled="@(Page == TotalPages)" @onclick="LastPage">Last »</button>
        </div>
    </div>

    <div class="table-wrap">
        <div class="table-meta">
            <div><strong>@PagedLogs.Count()</strong> shown</div>
            @if (!string.IsNullOrWhiteSpace(username) || workOrderId.HasValue || !string.IsNullOrWhiteSpace(vehiclePlate) || eventType.HasValue)
            {
                <div class="muted">Filters active</div>
            }
        </div>

        <table class="workorders-table logs-table">
            <thead>
                <tr>
                    <th style="width:80px;">ID</th>
                    <th style="min-width:140px;">Date</th>
                    <th>User</th>
                    <th>WorkOrder</th>
                    <th>Customer</th>
                    <th>Plate</th>
                    <th>Status</th>
                    <th>Start</th>
                    <th>End</th>
                    <th>Event</th>
                    <th style="min-width:260px;">Details</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in PagedLogs)
                {
                    <tr>
                        <td>@log.ID</td>
                        <td>@log.DateTime.ToLocalTime().ToString("yyyy-MM-dd HH:mm")</td>
                        <td>@log.UserName</td>
                        <td>#@log.workOrder.Id</td>
                        <td>@log.workOrder.CustomerName</td>
                        <td><code class="chip">@log.workOrder.VehiclePlate</code></td>
                        <td>
                            <span class="tag @StatusClass(log.workOrder.Status)">@log.workOrder.Status</span>
                        </td>
                        <td>@(log.workOrder.StartDate?.ToLocalTime().ToString("yyyy-MM-dd HH:mm") ?? "-")</td>
                        <td>@(log.workOrder.EndDate?.ToLocalTime().ToString("yyyy-MM-dd HH:mm") ?? "-")</td>
                        <td>
                            <span class="etype">
                                @(
                                                        log.EventType switch
                                                        {
                                                            WorkOrderLogEvent.WorkOrderLogEventType.Created => "Work Order Created",
                                                            WorkOrderLogEvent.WorkOrderLogEventType.StatusChanged => "Status Updated",
                                                            WorkOrderLogEvent.WorkOrderLogEventType.DetailsChanged => "Details Updated",
                                                            WorkOrderLogEvent.WorkOrderLogEventType.TaskAdded => "Task Added",
                                                            WorkOrderLogEvent.WorkOrderLogEventType.TaskRemoved => "Task Removed",
                                                            WorkOrderLogEvent.WorkOrderLogEventType.TaskStatusChanged => "Task Status Updated",
                                                            WorkOrderLogEvent.WorkOrderLogEventType.TaskDetailsChanged => "Task Details Updated",
                                                            _ => log.EventType.ToString()
                                                        }
                                                        )
                        </span>
                    </td>
                    <td>
                    @switch (log)
                            {
                                case WorkOrderLogEvent.DetailsChangedEvent detailsEvent:
                                    <details class="details-box">
                                        <summary>Details changed</summary>
                                        <div><strong>Customer:</strong> @detailsEvent.CustomerName</div>
                                        <div><strong>Plate:</strong> @detailsEvent.VehiclePlate</div>
                                        <div>@detailsEvent.Details</div>
                                    </details>
                                    break;

                                case WorkOrderLogEvent.TaskAddedEvent taskAdded:
                                    <span>Task added: <strong>@taskAdded.Task?.Title</strong></span>
                                    break;

                                case WorkOrderLogEvent.TaskRemovedEvent taskRemoved:
                                    <span>Task removed: <strong>@taskRemoved.Task?.Title</strong></span>
                                    break;

                                case WorkOrderLogEvent.TaskDetailsChangedEvent taskDetails:
                                    <details class="details-box">
                                        <summary>Task details changed</summary>
                                        <div><strong>Task:</strong> @taskDetails.Task?.Title</div>
                                        <div>@taskDetails.Details</div>
                                        <div><strong>Cost:</strong> @(taskDetails.CostCents / 100.0m).ToString("C")</div>
                                    </details>
                                    break;

                                case WorkOrderLogEvent.CreateEvent:
                                    <span class="text-ok">Work order created</span>
                                    break;

                                case WorkOrderLogEvent.StatusChangedEvent statusEvent:
                                    <span>Status → <strong>@statusEvent.Status</strong></span>
                                    break;

                                default:
                                    <span>-</span>
                                    break;
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pager (bottom) -->
    <div class="pager-bar" style="margin-top:.5rem;">
        <div class="pager-left">
            <button class="pager-btn" disabled="@(Page == 1)" @onclick="FirstPage">« First</button>
            <button class="pager-btn" disabled="@(Page == 1)" @onclick="PrevPage">‹ Prev</button>
        </div>
        <div class="pager-middle">
            Page @Page of @TotalPages
        </div>
        <div class="pager-right">
            <button class="pager-btn" disabled="@(Page == TotalPages)" @onclick="NextPage">Next ›</button>
            <button class="pager-btn" disabled="@(Page == TotalPages)" @onclick="LastPage">Last »</button>
        </div>
    </div>
}
@code {
    private List<WorkOrderLogEvent>? logs;

    private string? username;
    private int? workOrderId;
    private string? status;
    private string? vehiclePlate;
    private string? search;
    private WorkOrderLogEvent.WorkOrderLogEventType? eventType;

    // Pagination
    private int _pageSize = 25;
    private int PageSize
    {
        get => _pageSize;
        set { _pageSize = value <= 0 ? 25 : value; Page = 1; }
    }
    private int Page { get; set; } = 1;

    private int TotalCount => logs?.Count ?? 0;
    private int TotalPages => Math.Max(1, (int)Math.Ceiling(TotalCount / (double)PageSize));
    private IEnumerable<WorkOrderLogEvent> PagedLogs =>
        (logs ?? Enumerable.Empty<WorkOrderLogEvent>())
            .Skip((Page - 1) * PageSize)
            .Take(PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadLogs();
    }

    private async Task LoadLogs()
    {
        logs = await LogService.GetFilteredLogsAsync(username, workOrderId, status, vehiclePlate, search, eventType);
        Page = 1;
        StateHasChanged();
    }

    private void ClearFilters()
    {
        username = null;
        workOrderId = null;
        vehiclePlate = null;
        status = null;
        search = null;
        eventType = null;
        _ = LoadLogs();
    }

    private async Task ExportCsv()
    {
        var csv = await LogService.ExportLogsToCsvAsync(username, workOrderId, status, vehiclePlate, search, eventType);
        var bytes = Encoding.UTF8.GetBytes(csv);
        var fileName = $"WorkOrderLogs_{DateTime.Now:yyyyMMddHHmmss}.csv";

        using var stream = new MemoryStream(bytes);
        using var streamRef = new DotNetStreamReference(stream: stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

    private async Task CreateTestWorkOrder()
    {
        var newWorkOrder = new WorkOrder
        {
            CustomerName = "Goofy Duck",
            VehiclePlate = "GGDD423",
            Details = "Headlight replacement",
            Status = WorkOrderStatusType.Created,
            StartDate = DateTimeOffset.Now,
            EndDate = DateTimeOffset.Now.AddHours(2),
            Tasks = new List<WorkOrderTask>(),
            Parts = new List<WorkOrderPart>()
        };

        await AuditService.AddWorkOrderAsync(newWorkOrder);
        await LoadLogs();
    }

    private static string StatusClass(WorkOrderStatusType s) => s switch
    {
        WorkOrderStatusType.Created => "tag-info",
        WorkOrderStatusType.WorkStarted => "tag-warn",
        WorkOrderStatusType.WorkFinished => "tag-ok",
        WorkOrderStatusType.Closed => "tag-ok",
        _ => "tag-info"
    };

    // Pager handlers
    private void FirstPage() => Page = 1;
    private void PrevPage() { if (Page > 1) Page--; }
    private void NextPage() { if (Page < TotalPages) Page++; }
    private void LastPage() => Page = TotalPages;
}
