@page "/employee/admin/TaskTemplates"
@rendermode InteractiveServer
@layout Layout.MainLayout

@using KeyKiosk.Data
@using Microsoft.AspNetCore.Components.Forms
@inject KeyKiosk.Services.WorkOrderTaskTemplateService TemplateService
@inject ISnackbar Snackbar

<link href="DesktopShared.css" rel="stylesheet" />
<link href="WorkOrderTaskTemplate.css" rel="stylesheet" />

<PageTitle>Task Templates</PageTitle>
<h1>Task Templates</h1>

@if (Templates is null)
{
    <p class="text-center">Loading…</p>
}
else
{
    <!-- Toolbar: search (left) + add button (right) -->
    <div class="toolbar toolbar-spread">
        <div class="toolbar-left">
            <input class="table-input" style="min-width:260px"
                   placeholder="Search title or details"
                   @bind="Search" @bind:event="oninput" />
        </div>
        <button class="btn-primary" @onclick="ToggleAdd">@((ShowAdd ? "Close" : "Add Template"))</button>
    </div>

    <!-- Add panel -->
    @if (ShowAdd)
    {
        <div class="card-like add-card">
            <EditForm class="new-workorder-form" Model="@AddModel" OnValidSubmit="@OnAdd">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="grid-6 gap-md">
                    <div class="col-span-4">
                        <label class="muted">Title</label>
                        <InputText class="table-input" @bind-Value="AddModel.TaskTitle" />
                    </div>
                    <div class="col-span-2">
                        <label class="muted">Cost (¢)</label>
                        <InputNumber class="table-input" @bind-Value="AddModel.TaskCostCents" />
                    </div>

                    @* Optional details
                    <div class="col-span-6">
                        <label class="muted">Details</label>
                        <InputText class="table-input" @bind-Value="AddModel.TaskDetails" />
                    </div>
                    *@

                    <div class="col-span-2">
                        <label class="muted">Expected Hours</label>
                        <InputNumber class="table-input" @bind-Value="AddModel.ExpectedHours" />
                    </div>

                    <div class="col-span-6" style="text-align:right;">
                        <button class="btn-primary" type="submit">Create</button>
                        <button class="cancel-btn" type="button" @onclick="ToggleAdd">Cancel</button>
                    </div>
                </div>
            </EditForm>
        </div>
    }

    <!-- Table -->
    @if (!Filtered.Any())
    {
        <p class="text-center muted">No templates found.</p>
    }
    else
    {
        <table class="workorders-table">
            <thead>
                <tr>
                    <th style="width:80px;">Id</th>
                    <th>Title</th>
                    @* <th>Details</th> *@
                    <th>Cost</th>
                    <th>Expected Hours</th>
                    <th style="width:1%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var t in Filtered)
                {
                    var isEditing = EditingId == t.Id;
                    <tr>
                        <td>@t.Id</td>
                        <td>
                            @t.TaskTitle
                        </td>
                        @* <td>
                            @if (isEditing)
                            {
                                <InputText class="table-input" @bind-Value="EditingRow.TaskDetails" />
                            }
                            else
                            {
                                @t.TaskDetails
                            }
                        </td> *@
                        <td style="text-align:right;">
                            @if (isEditing)
                            {
                                <InputNumber class="table-input" @bind-Value="EditingRow.TaskCostCents" />
                            }
                            else
                            {
                                @FormatCost(t.TaskCostCents)
                            }
                        </td>
                        <td style="text-align:right;">
                            @if (isEditing)
                            {
                                <InputNumber class="table-input" @bind-Value="EditingRow.ExpectedHoursForCompletion" />
                            }
                            else
                            {
                                @t.ExpectedHoursForCompletion
                            }
                        </td>
                        <td style="white-space:nowrap;">
                            @if (isEditing)
                            {
                                <button class="save-btn small-btn" @onclick="SaveRowAsync">Save</button>
                                <button class="cancel-btn small-btn" @onclick="CancelEdit">Cancel</button>
                            }
                            else
                            {
                                <button class="edit-btn small-btn" @onclick="() => BeginEdit(t)">Edit</button>
                                <button class="delete-btn small-btn" @onclick="() => OnDelete(t.Id)">Delete</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    // Data
    private List<WorkOrderTaskTemplate>? Templates;

    // Toolbar
    private bool ShowAdd { get; set; } = false;
    private string Search { get; set; } = string.Empty;

    // Add form model
    private AddTemplateModel AddModel = new();

    // Inline edit model
    private int? EditingId;
    private WorkOrderTaskTemplate EditingRow = new();

    // Filter
    private IEnumerable<WorkOrderTaskTemplate> Filtered =>
        (Templates ?? Enumerable.Empty<WorkOrderTaskTemplate>())
            .Where(t =>
                string.IsNullOrWhiteSpace(Search)
                || (t.TaskTitle?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false)
                || (t.TaskDetails?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false));

    protected override void OnInitialized()
    {
        LoadTemplates();
    }

    private void LoadTemplates()
    {
        Templates = TemplateService.GetAllTaskTemplates();
        StateHasChanged();
    }

    private void ToggleAdd() => ShowAdd = !ShowAdd;

    // Add
    private void OnAdd()
    {
        try
        {
            var template = new WorkOrderTaskTemplate
            {
                TaskTitle = AddModel.TaskTitle?.Trim() ?? string.Empty,
                TaskDetails = AddModel.TaskDetails?.Trim() ?? string.Empty,
                TaskCostCents = AddModel.TaskCostCents,
                ExpectedHoursForCompletion = AddModel.ExpectedHours
            };

            TemplateService.AddWorkOrderTaskTemplate(template);
            LoadTemplates();

            AddModel = new();
            ShowAdd = false;
            Snackbar.Add("Template created successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Create failed: {ex.Message}", Severity.Error);
        }
    }

    // Inline edit
    private void BeginEdit(WorkOrderTaskTemplate t)
    {
        EditingId = t.Id;
        EditingRow = new WorkOrderTaskTemplate
        {
            Id = t.Id,
            TaskTitle = t.TaskTitle,
            // TaskDetails = t.TaskDetails,
            TaskCostCents = t.TaskCostCents,
            ExpectedHoursForCompletion = t.ExpectedHoursForCompletion
        };
    }

    private void CancelEdit()
    {
        EditingId = null;
        EditingRow = new WorkOrderTaskTemplate();
    }

    private void SaveRowAsync()
    {
        if (EditingId is null) return;

        try
        {
            TemplateService.UpdateWorkOrderTaskTemplate(EditingRow);
            LoadTemplates();
            EditingId = null;
            Snackbar.Add("Template updated successfully.", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Update failed: {ex.Message}", Severity.Error);
        }
    }

    private void OnDelete(int id)
    {
        try
        {
            TemplateService.DeleteWorkOrderTaskTemplate(id);
            LoadTemplates();
            Snackbar.Add($"Template #{id} deleted.", Severity.Info);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Delete failed: {ex.Message}", Severity.Error);
        }
    }

    // Helpers
    private static string FormatCost(int cents) => (cents / 100m).ToString("C");

    private sealed class AddTemplateModel
    {
        public string? TaskTitle { get; set; }
        public string? TaskDetails { get; set; }
        public int TaskCostCents { get; set; }
        public int ExpectedHours { get; set; }
    }
}
