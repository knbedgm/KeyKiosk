@page "/employee/admin/users"
@rendermode InteractiveServer
@layout Layout.MainLayout
@using KeyKiosk.Data
@inject KeyKiosk.Services.UserService UserService
@inject ISnackbar Snackbar

<link href="DesktopShared.css" rel="stylesheet" />
<link href="Employees.css" rel="stylesheet" />

<PageTitle>User Management</PageTitle>
<h1 style="text-align:center">Users</h1>

@if (Users is null)
{
    <p class="text-center">Loading…</p>
}
else
{
    <!-- Top toolbar -->
    <div style="display:flex;align-items:center;gap:.75rem;justify-content:space-between;margin:.5rem 0 1rem;">
        <div style="display:flex;gap:.5rem;align-items:center;">
            <input class="table-input" style="min-width:260px" placeholder="Search name or PIN"
                   @bind="Search" @bind:event="oninput" />
            <select class="table-select" title="Role filter" @bind="FilterRole">
                <option value="">All roles</option>
                @foreach (var r in Enum.GetValues(typeof(UserType)))
                {
                    <option value="@r">@r</option>
                }
            </select>
        </div>
        <button class="btn-primary" @onclick="ToggleAdd">@(ShowAdd ? "Close" : "Add User")</button>
    </div>

    <!-- Add panel -->
    @if (ShowAdd)
    {
        <div class="card-like" style="padding:1rem;border:1px solid #e5e7eb;border-radius:12px;margin-bottom:1rem;max-width:900px;">
            <EditForm Model="@NewUser" OnValidSubmit="@CreateUserAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div style="display:grid;grid-template-columns:repeat(6,1fr);gap:.75rem;">
                    <div style="grid-column: span 3;">
                        <label class="muted">Name</label>
                        <InputText class="table-input" @bind-Value="NewUser.Name" />
                    </div>
                    <div style="grid-column: span 2;">
                        <label class="muted">PIN</label>
                        <InputText class="table-input" @bind-Value="NewUser.Pin" />
                    </div>
                    <div>
                        <label class="muted">Role</label>
                        <InputSelect class="table-select" @bind-Value="NewUser.UserType">
                            @foreach (UserType r in Enum.GetValues(typeof(UserType)))
                            {
                                <option value="@r">@r</option>
                            }
                        </InputSelect>
                    </div>
                    <div style="grid-column: span 6; text-align:right;">
                        <button class="btn-primary" type="submit">Create</button>
                        <button class="cancel-btn" type="button" @onclick="ToggleAdd">Cancel</button>
                    </div>
                </div>
            </EditForm>
        </div>
    }

    <!-- Pager (top) -->
    <div class="pager-bar">
        <div class="pager-left">
            <button class="pager-btn" disabled="@(Page == 1)" @onclick="FirstPage">« First</button>
            <button class="pager-btn" disabled="@(Page == 1)" @onclick="PrevPage">‹ Prev</button>
        </div>
        <div class="pager-middle">
            Page @Page of @TotalPages
            <span class="pager-sep">|</span>
            <label>Per page</label>
            <select class="pager-select" @bind="PageSize">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15">15</option>
                <option value="25">25</option>
                <option value="50">50</option>
            </select>
            <span class="pager-sep">|</span>
            <span>@FilteredCount item(s)</span>
        </div>
        <div class="pager-right">
            <button class="pager-btn" disabled="@(Page == TotalPages)" @onclick="NextPage">Next ›</button>
            <button class="pager-btn" disabled="@(Page == TotalPages)" @onclick="LastPage">Last »</button>
        </div>
    </div>

    <!-- Table -->
    <div class="workorders-table-container">
        <table class="workorders-table">
            <thead>
                <tr>
                    <th style="width:70px;">Id</th>
                    <th>Name</th>
                    <th>PIN</th>
                    <th>Role</th>
                    <th style="width:1%;">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var u in PagedUsers)
                {
                    var isEditing = EditingId == u.Id;
                    <tr>
                        <td>@u.Id</td>
                        <td>
                            @if (isEditing)
                            {
                                <InputText class="table-input" @bind-Value="EditModel.Name" />
                            }
                            else
                            {

                                @u.Name
                            }
                        </td>
                        <td>
                            @if (isEditing)
                            {
                                <InputText class="table-input" @bind-Value="EditModel.Pin" />
                            }
                            else
                            {

                                @u.Pin
                            }
                        </td>
                        <td>
                            @if (isEditing)
                            {
                                <InputSelect class="table-select" @bind-Value="EditModel.UserType">
                                    @foreach (UserType r in Enum.GetValues(typeof(UserType)))
                                    {
                                        <option value="@r">@r</option>
                                    }
                                </InputSelect>
                            }
                            else
                            {

                                @u.UserType
                            }
                        </td>
                        <td style="white-space:nowrap;">
                            @if (isEditing)
                            {
                                <button class="save-btn small-btn" @onclick="() => SaveUserAsync(u.Id)">Save</button>
                                <button class="cancel-btn small-btn" @onclick="CancelEdit">Cancel</button>
                            }
                            else
                            {
                                <button class="edit-btn small-btn" @onclick="() => BeginEdit(u)">Edit</button>
                                <button class="delete-btn small-btn" @onclick="() => DeleteUserAsync(u.Id)">Delete</button>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pager (bottom) -->
    <div class="pager-bar" style="margin-top:.5rem;">
        <div class="pager-left">
            <button class="pager-btn" disabled="@(Page == 1)" @onclick="FirstPage">« First</button>
            <button class="pager-btn" disabled="@(Page == 1)" @onclick="PrevPage">‹ Prev</button>
        </div>
        <div class="pager-middle">
            Page @Page of @TotalPages
        </div>
        <div class="pager-right">
            <button class="pager-btn" disabled="@(Page == TotalPages)" @onclick="NextPage">Next ›</button>
            <button class="pager-btn" disabled="@(Page == TotalPages)" @onclick="LastPage">Last »</button>
        </div>
    </div>
}

@code {
    // List + UI state
    private List<User>? Users;
    private string Search { get; set; } = "";
    private string FilterRole { get; set; } = "";
    private bool ShowAdd { get; set; } = false;

    // Add model
    private User NewUser { get; set; } = new();

    // Edit model
    private int? EditingId { get; set; }
    private User EditModel { get; set; } = new();

    // Pagination
    private int _pageSize = 10;
    private int PageSize
    {
        get => _pageSize;
        set { _pageSize = value <= 0 ? 10 : value; Page = 1; }
    }
    private int Page { get; set; } = 1;

    private IEnumerable<User> Filtered =>
        (Users ?? Enumerable.Empty<User>())
            .Where(u =>
                (string.IsNullOrWhiteSpace(Search)
                    || (u.Name?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false)
                    || (u.Pin?.Contains(Search, StringComparison.OrdinalIgnoreCase) ?? false))
                && (string.IsNullOrWhiteSpace(FilterRole)
                    || u.UserType.ToString() == FilterRole));

    private int FilteredCount => Filtered.Count();
    private int TotalPages => Math.Max(1, (int)Math.Ceiling(FilteredCount / (double)PageSize));
    private IEnumerable<User> PagedUsers => Filtered.Skip((Page - 1) * PageSize).Take(PageSize);

    protected override async Task OnInitializedAsync()
    {
        Users = await UserService.GetAllAsync();
    }

    private void ToggleAdd() => ShowAdd = !ShowAdd;

    private async Task CreateUserAsync()
    {
        if (string.IsNullOrWhiteSpace(NewUser.Name) || string.IsNullOrWhiteSpace(NewUser.Pin))
        {
            Snackbar.Add("Name and PIN are required.", Severity.Warning);
            return;
        }

        var created = await UserService.AddAsync(NewUser);
        Snackbar.Add($"User '{created.Name}' created.", Severity.Success);

        Users = await UserService.GetAllAsync();
        NewUser = new();
        ShowAdd = false;
        Page = 1;
        StateHasChanged();
    }

    private void BeginEdit(User u)
    {
        EditingId = u.Id;
        EditModel = new User
        {
            Id = u.Id,
            Name = u.Name,
            Pin = u.Pin,
            UserType = u.UserType
        };
    }

    private void CancelEdit()
    {
        EditingId = null;
        EditModel = new();
    }

    private async Task SaveUserAsync(int id)
    {
        if (EditingId is null) return;

        await UserService.UpdateAsync(id, new User
        {
            Name = EditModel.Name ?? "",
            Pin = EditModel.Pin ?? "000000",
            UserType = EditModel.UserType
        });

        Snackbar.Add("User updated.", Severity.Success);
        Users = await UserService.GetAllAsync();
        CancelEdit();
    }

    private async Task DeleteUserAsync(int id)
    {
        await UserService.DeleteAsync(id);
        Snackbar.Add("User deleted.", Severity.Info);
        Users = await UserService.GetAllAsync();

        if (Page > TotalPages) Page = TotalPages;
    }

    // Pager handlers
    private void FirstPage() => Page = 1;
    private void PrevPage() { if (Page > 1) Page--; }
    private void NextPage() { if (Page < TotalPages) Page++; }
    private void LastPage() => Page = TotalPages;
}
