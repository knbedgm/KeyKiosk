@page "/employee/home"
@layout Layout.MainLayout
@using KeyKiosk.Data
@inject KeyKiosk.Services.WorkOrderService WorkOrderService
@inject KeyKiosk.Services.ToastService ToastService

<h3 style="text-align:center">Employee Home Page</h3>

<div style="display: flex; gap: 20px; align-items: center;">
    <div>
        <label>Search by Customer Name:</label>
        <input type="text" @bind="EnteredCustomerName" />
        <button @onclick="LoadCustomerWorkOrdersAsync">Search</button>
    </div>

    <div>
        <label>Search by Vehicle Plate:</label>
        <input type="text" @bind="EnteredVehiclePlate" />
        <button @onclick="LoadVehicleWorkOrdersAsync">Search</button>
    </div>
</div>

<hr />

<h4 style="text-align:center">Create New Work Order</h4>
<div class="new-workorder-form">
    <label>Customer Name:</label>
    <input type="text" @bind="NewWorkOrder.CustomerName" />

    <label>Vehicle Plate:</label>
    <input type="text" @bind="NewWorkOrder.VehiclePlate" />

    <label>Details:</label>
    <input type="text" @bind="NewWorkOrder.Details" />

    <label>Status:</label>
    <select @bind="NewWorkOrder.Status">
        @foreach (var status in Enum.GetValues(typeof(WorkOrderStatusType)))
        {
            <option value="@status">@status</option>
        }
    </select>

    <label>Start Date:</label>
    <input type="datetime-local" @bind="NewWorkOrder.StartDate" />

    <label>End Date:</label>
    <input type="datetime-local" @bind="NewWorkOrder.EndDate" />

    <button @onclick="CreateWorkOrderAsync">Add Work Order</button>
</div>

<hr />
<br />

@if (WorkOrders != null && WorkOrders.Count > 0)
{
    <h4 style="text-align:center">Work Orders</h4>
    <table>
        <thead>
            <tr>
                <th>Id</th>
                <th>Vehicle</th>
                <th>Details</th>
                <th>Status</th>
                <th>Start Date</th>
                <th>End Date</th>
                <th>Total Cost</th>
                <th>Tasks</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var workOrder in WorkOrders)
            {
                <tr>
                    <td>@workOrder.Id</td>
                    <td>
                        @if (EditingWorkOrder == workOrder)
                        {
                            <input type="text" @bind="workOrder.VehiclePlate" />
                        }
                        else
                        {
                            @workOrder.VehiclePlate
                        }
                    </td>
                    <td>
                        @if (EditingWorkOrder == workOrder)
                        {
                            <input type="text" @bind="workOrder.Details" />
                        }
                        else
                        {
                            @workOrder.Details
                        }
                    </td>
                    <td>
                        @if (EditingWorkOrder == workOrder)
                        {
                            <select @bind="workOrder.Status">
                                @foreach (var status in Enum.GetValues(typeof(WorkOrderStatusType)))
                                {
                                    <option value="@status">@status</option>
                                }
                            </select>
                        }
                        else
                        {
                            @workOrder.Status
                        }
                    </td>
                    <td>
                        @if (EditingWorkOrder == workOrder)
                        {
                            <input type="datetime-local" @bind="workOrder.StartDate" />
                        }
                        else
                        {
                            @workOrder.StartDate
                        }
                    </td>
                    <td>
                        @if (EditingWorkOrder == workOrder)
                        {
                            <input type="datetime-local" @bind="workOrder.EndDate" />
                        }
                        else
                        {
                            @workOrder.EndDate
                        }
                    </td>
                    <td>@workOrder.TotalCostCents</td>
                    <td>
                        <ul>
                            @foreach (var task in workOrder.Tasks)
                            {
                                <li>@task.Description (@task.CostCents)</li>
                            }
                        </ul>
                    </td>
                    <td>
                        @if (EditingWorkOrder == workOrder)
                        {
                            <button @onclick="() => SaveWorkOrderAsync(workOrder)">Save</button>
                            <button @onclick="CancelEdit">Cancel</button>
                        }
                        else
                        {
                            <button @onclick="() => EditWorkOrder(workOrder)">Edit</button>
                            <button @onclick="() => DeleteWorkOrderAsync(workOrder.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string EnteredCustomerName { get; set; } = "";
    private string EnteredVehiclePlate { get; set; } = "";
    private List<WorkOrder> WorkOrders { get; set; } = new();
    private WorkOrder? EditingWorkOrder { get; set; }

    private WorkOrder NewWorkOrder { get; set; } = new WorkOrder
    {
        CustomerName = string.Empty,
        VehiclePlate = string.Empty,
        Details = string.Empty,
        Tasks = new List<WorkOrderTask>(),
        StartDate = DateTime.Now,
        EndDate = DateTime.Now.AddDays(1),
        Status = WorkOrderStatusType.Created
    };

    private void ShowSuccessToast()
    {
        ToastService.ShowToast("Saved successfully!", "success");
    }

    private async Task LoadCustomerWorkOrdersAsync()
    {
        if (string.IsNullOrWhiteSpace(EnteredCustomerName))
            return;

        WorkOrders = await WorkOrderService.GetWorkOrdersByCustomerNameAsync(EnteredCustomerName);

        if (WorkOrders.Count > 0)
            ToastService.ShowToast($"Found {WorkOrders.Count} work order(s) for {EnteredCustomerName}.", "success");
        else
            ToastService.ShowToast($"No work orders found for {EnteredCustomerName}.", "warning");
    }

    private async Task LoadVehicleWorkOrdersAsync()
    {
        if (string.IsNullOrWhiteSpace(EnteredVehiclePlate))
            return;

        WorkOrders = await WorkOrderService.GetWorkOrdersByVehiclePlateAsync(EnteredVehiclePlate);

        if (WorkOrders.Count > 0)
            ToastService.ShowToast($"Found {WorkOrders.Count} work order(s) for vehicle {EnteredVehiclePlate}.", "success");
        else
            ToastService.ShowToast($"No work orders found for vehicle {EnteredVehiclePlate}.", "warning");
    }

    private async Task CreateWorkOrderAsync()
    {
        if (string.IsNullOrWhiteSpace(NewWorkOrder.CustomerName) ||
            string.IsNullOrWhiteSpace(NewWorkOrder.VehiclePlate))
        {
            ToastService.ShowToast("Please fill all required fields.", "warning");
            return;
        }

        await WorkOrderService.AddWorkOrderAsync(NewWorkOrder);
        ToastService.ShowToast("New work order created successfully.", "success");

        NewWorkOrder = new WorkOrder
        {
            CustomerName = string.Empty,
            VehiclePlate = string.Empty,
            Details = string.Empty,
            Tasks = new List<WorkOrderTask>(),
            StartDate = DateTime.Now,
            EndDate = DateTime.Now.AddDays(1),
            Status = WorkOrderStatusType.Created
        };

        await LoadCustomerWorkOrdersAsync();
    }

    private void EditWorkOrder(WorkOrder workOrder) => EditingWorkOrder = workOrder;

    private void CancelEdit() => EditingWorkOrder = null;

    private async Task SaveWorkOrderAsync(WorkOrder workOrder)
    {
        await WorkOrderService.UpdateWorkOrderAsync(workOrder);
        EditingWorkOrder = null;
        ToastService.ShowToast($"Work order {workOrder.Id} updated successfully.", "success");
    }

    private async Task DeleteWorkOrderAsync(int id)
    {
        await WorkOrderService.DeleteWorkOrderAsync(id);
        ToastService.ShowToast($"Work order {id} deleted.", "info");
        await LoadCustomerWorkOrdersAsync();
    }
}
